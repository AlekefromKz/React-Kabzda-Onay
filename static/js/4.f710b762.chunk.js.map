{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialogAvatar","src","to","dialog","name","Message","ownerClassName","my","myMessage","friendMessage","message","maxLength10","maxLengthValidator","NewMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogElements","dialogsPage","dialogs","map","d","messageElements","messages","m","dialogsItems","values","addMessage","newMessageBody","mapStateToProps","state","isAuth","auth","compose","connect","Component"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,aAAe,8BAA8B,cAAgB,+BAA+B,UAAY,6B,kFCmBrUC,EAhBI,SAAAC,GACf,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,gCACI,qBACIC,UAAWC,IAAEC,aACbC,IAAI,wGAER,cAAC,IAAD,CAASC,GAAIN,EAAME,UAAWC,IAAEI,OAAhC,SACKR,EAAMS,WCDRC,EAVC,SAAAV,GACZ,IAAIW,EAAiB,GAMrB,OAJIA,EADAX,EAAMY,GACWR,IAAES,UAEFT,IAAEU,cAEhB,mBAAGX,UAAS,UAAKC,IAAEW,QAAP,YAAkBJ,GAA9B,SAAiDX,EAAMe,W,iCCD5DC,EAAcC,YAAmB,IAoBjCC,EAAsBC,YAAU,CAAEC,KAAM,qBAAlBD,EAlBL,SAAAnB,GACnB,OACI,uBAAMqB,SAAUrB,EAAMsB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CACIC,UAAWC,IACXhB,KAAM,iBACNiB,YAAa,qBACbC,SAAU,CAACC,IAAUZ,OAG7B,8BACI,yDA2BDa,EAnBC,SAAA7B,GACZ,IAAM8B,EAAiB9B,EAAM+B,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYzB,KAAMyB,EAAEzB,KAAMP,GAAIgC,EAAEhC,QACpFiC,EAAkBnC,EAAM+B,YAAYK,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAStB,QAASsB,EAAEtB,QAASH,GAAIyB,EAAEzB,QAM/F,OACI,sBAAKT,UAAWC,IAAE4B,QAAlB,UACI,qBAAK7B,UAAWC,IAAEkC,aAAlB,SAAiCR,IACjC,sBAAK3B,UAAWC,IAAEgC,SAAlB,UACKD,EACD,cAACjB,EAAD,CAAqBG,SATX,SAAAkB,GAClBvC,EAAMwC,WAAWD,EAAOE,0B,gCChC1BC,EAAkB,SAAAC,GAAK,MAAK,CAC9BC,OAAQD,EAAME,KAAKD,S,OCORE,sBAAQC,aANC,SAAAJ,GACpB,MAAO,CACHZ,YAAaY,EAAMZ,eAIqB,CAAES,kBDJlB,SAAAQ,GAM5B,OAAOD,YAAQL,EAARK,EALmB,SAAA/C,GACtB,OAAKA,EAAM4C,OACJ,cAACI,EAAD,eAAehD,IADI,cAAC,IAAD,CAAUO,GAAG,gBCEhCuC,CAAoEjB","file":"static/js/4.f710b762.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\",\"dialogAvatar\":\"Dialogs_dialogAvatar__3tTjc\",\"friendMessage\":\"Dialogs_friendMessage__32WIG\",\"myMessage\":\"Dialogs_myMessage__2R5rm\"};","import React from 'react';\nimport s from './../Dialogs.module.css';\nimport {NavLink} from 'react-router-dom';\n\nconst DialogItem = props => {\n    let path = '/dialogs/' + props.id;\n\n    return (\n        <div>\n            <img\n                className={s.dialogAvatar}\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR4j2gcKWzgJbtP4THqnDRJqr2fHO8jgLoM4Q&usqp=CAU\"\n            ></img>\n            <NavLink to={path} className={s.dialog}>\n                {props.name}\n            </NavLink>\n        </div>\n    );\n};\n\nexport default DialogItem;\n","import React from 'react';\nimport s from './../Dialogs.module.css';\n\nconst Message = props => {\n    let ownerClassName = '';\n    if (props.my) {\n        ownerClassName = s.myMessage;\n    } else {\n        ownerClassName = s.friendMessage;\n    }\n    return <p className={`${s.message} ${ownerClassName}`}>{props.message}</p>;\n};\n\nexport default Message;\n","import React from 'react';\nimport s from './Dialogs.module.css';\n\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport {Field, reduxForm} from 'redux-form';\nimport {maxLengthValidator, required} from '../../utils/validators/validators';\nimport {Textarea} from '../common/Form/FormControls';\n\nconst maxLength10 = maxLengthValidator(10);\n\nconst NewMessageForm = props => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field\n                    component={Textarea}\n                    name={'newMessageBody'}\n                    placeholder={'Enter your message'}\n                    validate={[required, maxLength10]}\n                />\n            </div>\n            <div>\n                <button>Add message</button>\n            </div>\n        </form>\n    );\n};\n\nconst NewMessageReduxForm = reduxForm({ form: 'dialogsNewMessage' })(NewMessageForm);\n\nconst Dialogs = props => {\n    const dialogElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id} />);\n    const messageElements = props.dialogsPage.messages.map(m => <Message message={m.message} my={m.my} />);\n\n    const addNewMessage = values => {\n        props.addMessage(values.newMessageBody);\n    };\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>{dialogElements}</div>\n            <div className={s.messages}>\n                {messageElements}\n                <NewMessageReduxForm onSubmit={addNewMessage} />\n            </div>\n        </div>\n    );\n};\n\nexport default Dialogs;\n","import {Redirect} from 'react-router-dom';\nimport React from 'react';\nimport {connect} from 'react-redux';\n\nconst mapStateToProps = state => ({\n    isAuth: state.auth.isAuth,\n});\n\nexport const withAuthRedirect = Component => {\n    const RedirectComponent = props => {\n        if (!props.isAuth) return <Redirect to=\"/login\" />;\n        return <Component {...props} />;\n    };\n\n    return connect(mapStateToProps)(RedirectComponent);\n};\n","import Dialogs from './Dialogs';\nimport {addMessage} from '../../redux/dialogs-reducer';\nimport {connect} from 'react-redux';\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\nimport {compose} from 'redux';\n\nconst mapStateToProps = state => {\n    return {\n        dialogsPage: state.dialogsPage,\n    };\n};\n\nexport default compose(connect(mapStateToProps, { addMessage }), withAuthRedirect)(Dialogs);\n"],"sourceRoot":""}