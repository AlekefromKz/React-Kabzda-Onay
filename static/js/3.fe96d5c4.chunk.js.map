{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHook.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","message","likesCount","maxLength100","maxLengthValidator","NewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPosts","postElements","posts","map","p","values","addPostCallback","newPostBody","postsBlock","MyPostsContainer","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","ProfileStatusWithHook","React","memo","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","value","onBlur","updateProfileStatus","onChange","e","currentTarget","ProfileInfo","profile","Preloader","profileDescriprion","fullName","photos","large","aboutMe","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getProfileStatus","Component","compose","auth","isAuthorized","isAuth","withRouter"],"mappings":"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","file":"static/js/3.fe96d5c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MyPosts\":\"MyPosts_MyPosts__3VUNK\",\"postsBlock\":\"MyPosts_postsBlock__2ifKf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileDescriprion\":\"ProfileInfo_profileDescriprion__3Skee\"};","import React from 'react';\nimport s from './Post.module.css';\n\nconst Post = props => {\n    return (\n        <div className={s.item}>\n            <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR4j2gcKWzgJbtP4THqnDRJqr2fHO8jgLoM4Q&usqp=CAU\"></img>\n            {props.message}\n            <div>\n                <span>{props.likesCount}</span>\n                <span>like</span>\n            </div>\n        </div>\n    );\n};\n\nexport default Post;\n","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport {Field, reduxForm} from 'redux-form';\nimport {Textarea} from '../../common/Form/FormControls';\nimport {maxLengthValidator, required} from '../../../utils/validators/validators';\n\nconst maxLength100 = maxLengthValidator(100);\n\nconst NewPostForm = props => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>React.memo\n                <Field\n                    component={Textarea}\n                    name={'newPostBody'}\n                    placeholder={'Enter your news'}\n                    validate={[required, maxLength100]}\n                />\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    );\n};\n\nconst NewPostReduxForm = reduxForm({ form: 'newPost' })(NewPostForm);\n\nconst MyPosts = props => {\n    const postElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} />);\n\n    const addNewPost = values => {\n        props.addPostCallback(values.newPostBody);\n    };\n\n    return (\n        <div className={s.MyPosts}>\n            <h3>my posts</h3>\n            <NewPostReduxForm onSubmit={addNewPost} />\n            <div className={s.postsBlock}>{postElements}</div>\n        </div>\n    );\n};\n\nexport default MyPosts;\n","import MyPosts from './MyPosts';\nimport {addPostActionCreator} from '../../../redux/profile-reducer';\nimport {connect} from 'react-redux';\n\nconst mapStateToProps = state => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addPostCallback: newPostBody => {\n            dispatch(addPostActionCreator(newPostBody));\n        },\n    };\n};\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;\n","import React, {useEffect, useState} from 'react';\n\nconst ProfileStatusWithHook = React.memo((props) => {\n    const [editMode, setEditMode] = useState(false);\n    const [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateProfileStatus(status);\n\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    };\n\n    return (\n        <div>\n            {!editMode && (\n                <div>\n                    <span onDoubleClick={activateEditMode}>{props.status}</span>\n                </div>\n            )}\n            {editMode && (\n                <div>\n                    <input\n                        value={status}\n                        onBlur={deactivateEditMode}\n                        onChange={onStatusChange}\n                    />\n                </div>\n            )}\n        </div>\n    );\n});\n\nexport default ProfileStatusWithHook;\n","import React from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from '../../common/Preloader/Preloader';\nimport ProfileStatusWithHook from \"./ProfileStatusWithHook\";\n\nconst ProfileInfo = props => {\n    if (!props.profile) {\n        return <Preloader />;\n    }\n\n    const profile = props.profile;\n\n    return (\n        <div>\n            <div className={s.profileDescriprion}>\n                <p>\n                    Full name: <b>{profile.fullName}</b>\n                </p>\n                <img src={profile.photos?.large} />\n                <p>\n                    About me: <b>{profile.aboutMe}</b>\n                </p>\n                <div>\n                    <ProfileStatusWithHook status={props.status} updateProfileStatus={props.updateProfileStatus} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ProfileInfo;\n","import React from 'react';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\n\nconst Profile = ({profile, status, updateProfileStatus}) => {\n    return (\n        <div>\n            <ProfileInfo\n                profile={profile}\n                status={status}\n                updateProfileStatus={updateProfileStatus}\n            />\n            <MyPostsContainer/>\n        </div>\n    );\n};\n\nexport default Profile;\n","import React from 'react';\nimport Profile from './Profile';\nimport {connect} from 'react-redux';\nimport {getProfileStatus, getUserProfile, updateProfileStatus} from '../../redux/profile-reducer';\nimport {withRouter} from 'react-router-dom';\nimport {compose} from 'redux';\n\nclass ProfileContainer extends React.Component {\n    componentDidMount() {\n        const userId = this.props.match.params.userId || this.props.authorizedUserId;\n        if (!userId){\n            this.props.history.push(\"/login\");\n        }\n        this.props.getUserProfile(userId);\n        this.props.getProfileStatus(userId);\n    }\n\n    render() {\n        return (\n            <Profile\n                {...this.props}\n                profile={this.props.profile}\n                status={this.props.status}\n                updateProfileStatus={this.props.updateProfileStatus}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    auth: state.auth,\n    authorizedUserId: state.auth.userId,\n    isAuthorized: state.auth.isAuth,\n});\n\nexport default compose(\n    connect(mapStateToProps, {\n        getUserProfile,\n        getProfileStatus,\n        updateProfileStatus,\n    }),\n    withRouter,\n)(ProfileContainer);\n"],"sourceRoot":""}